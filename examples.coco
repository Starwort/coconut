"hello, world!" |> print


x -> x + 1


range(10) |> map$(.**2) |> list


match [head] + tail in [0, 1, 2, 3]:
    print(head, tail)


{"list": [0] + rest} = {"list": [0, 1, 2, 3]}


A = np.array([1, 2;; 3, 4])
AA = [A ; A]


product = reduce$(*)


first_five_words = .split() ..> .$[:5] ..> " ".join


(| first_elem() |) :: rest_elems()


range(100) |> parallel_map$(.**2) |> list


def factorial(n, acc=1):
    match n:
        case 0:
            return acc
        case int(_) if n > 0:
            return factorial(n-1, acc*n)


data Empty()
data Leaf(n)
data Node(l, r)

def size(Empty()) = 0

@addpattern(size)
def size(Leaf(n)) = 1

@addpattern(size)
def size(Node(l, r)) = size(l) + size(r)
